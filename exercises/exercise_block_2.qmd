---
title: "Exercise - Block 2"
editor: source
editor_options: 
  chunk_output_type: console
---

## Introduction to ggplot2

`ggplot2` is a powerful and popular R package for creating a wide variety of plots. It is based on the "grammar of graphics" philosophy, which allows you to build plots layer by layer. This makes it easy to create complex and customized visualizations.

### Base `R` vs. `ggplot2`

| Feature | Base `R` | `ggplot2` |
|---|---|---|
| **Philosophy** | "Ink on paper" - you draw elements on the plot. | "Grammar of graphics" - you build plots with layers. |
| **Syntax** | Functions for specific plots (e.g., `plot`, `hist`). | Consistent syntax with `ggplot()` + `geom_*()`. |
| **Customization** | Can be complex, often requiring many parameters. | Easy to add layers for themes, labels, and annotations. |
| **Data Format** | Often requires data in specific formats (vectors, matrices). | Prefers data in data frames (long format). |

## Installing packages

Installing packages in `R` could be a time-consuming and a difficult process. Hence, we will use [`renv`](https://rstudio.github.io/renv/articles/renv.html) `R` package for installing packages throughout this course.

```{r, eval=FALSE}
renv::install("ggplot2")
renv::install("reshape2")
renv::install("patchwork")
```

## Packages
```{r, message=FALSE, warning=FALSE}
library(ggplot2)
library(reshape2)
library(patchwork)
```


## Exploratory data analysis

```{r}
data <- readRDS(gzcon(url(
  "https://raw.githubusercontent.com/urppeia/publication_figs/main/data.rds"
)))
```

```{r}
str(data)
```

```{r}
data$anno
```

```{r}
head(data$counts)
```

```{r}
head(data$diff)
```

## Long format data

### Long format of counts

```{r}
counts_long <- melt(data$counts,
  variable.name = "Sample_ID",
  value.name = "Expression"
)
```

```{r}
head(counts_long)
```

### Merging samples annotation

```{r}
data_long <- merge(data$anno, counts_long)
```

```{r}
head(data_long)
```


### Boxplot of normalized data

In base `R`, we used `boxplot()`. In `ggplot2`, we use `ggplot()` and `geom_boxplot()`.

```{r}
ggplot(data_long, aes(x = Sample_ID, y = Expression)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(
    title = "Normalized expression per sample",
    x = "Sample",
    y = "Expression"
  )
```

### Exercise 1

**A.** Color the boxplots by condition (control vs. sucrose).

::: {.callout-tip collapse="true"}
```{r}
# We need to add the condition information to our long data frame
ggplot(data_long, aes(x = Sample_ID, y = Expression, fill = compound)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(
    title = "Normalized expression per sample",
    x = "Sample",
    y = "Expression"
  ) +
  scale_fill_manual(values = c("none" = "steelblue", "sucrose" = "tomato"))
```
:::


**B.** Remove the boxplot outliers.

::: {.callout-tip collapse="true"}
```{r}
ggplot(data_long, aes(x = Sample_ID, y = Expression, fill = compound)) +
  geom_boxplot(outlier.shape = NA) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(
    title = "Normalized expression per sample",
    x = "Sample",
    y = "Expression"
  ) +
  scale_fill_manual(values = c("none" = "steelblue", "sucrose" = "tomato"))
```
:::


**C.** Make a Violin plot.

::: {.callout-tip collapse="true"}
```{r}
ggplot(data_long, aes(x = Sample_ID, y = Expression, fill = compound)) +
  geom_violin() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(
    title = "Normalized expression per sample",
    x = "Sample",
    y = "Expression"
  ) +
  scale_fill_manual(values = c("none" = "steelblue", "sucrose" = "tomato"))
```
:::


**D.** A `Raincloud` might be better for visualization. We learnt this in the [first block](https://www.data-to-viz.com/caveat/boxplot.html). Can you make this? 

::: {.callout-tip collapse="true"}
```{r, warning=FALSE, message=FALSE}
library(PupillometryR)

ggplot(data_long, aes(x = Sample_ID, y = Expression, fill = compound, color = compound)) +
  # flat violin (half-violin for Raincloud look)
  geom_flat_violin(
    color = "black",
    alpha = 0.5,
    position = position_nudge(x = -0.15)
  ) +

  # stacked dots for “rain”
  geom_dotplot(
    binaxis = "y",
    stackdir = "down",
    dotsize = 0.02,
    binwidth = 0.1,
    position = position_nudge(x = 0.05),
    alpha = 0.8
  ) +

  # colors
  scale_fill_manual(values = c("none" = "steelblue", "sucrose" = "tomato")) +
  scale_color_manual(values = c("none" = "steelblue", "sucrose" = "tomato")) +
  # labels
  labs(
    x = "Samples",
    y = "Expression",
    title = "Boxplot",
    subtitle = "Sucrose at 3h and 24h",
    caption = "This is a Boxplot of Sucrose comparison."
  ) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  facet_grid(compound~dose)
```
:::

### Barplot of mean expression

In base R, we used `barplot()`. In `ggplot2`, we use `geom_bar()` or `geom_col()`.

```{r}
ggplot(data_long, aes(x = Sample_ID, y = Expression, fill = compound)) +
  geom_bar(stat = "summary", fun = mean, position = "dodge") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  labs(
    title = "Mean normalized expression per sample",
    x = "Sample",
    y = "Mean Expression"
  ) +
  scale_fill_manual(values = c("none" = "steelblue", "sucrose" = "tomato"))
```

### Histogram of expression values

In base R, we used `hist()`. In `ggplot2`, we use `geom_histogram()`.

```{r}
ggplot(data_long, aes(x = Expression)) +
  geom_histogram(bins = 40, fill = "lightgray", color = "gray40") +
  labs(
    title = "Distribution of normalized expression values",
    x = "Expression",
    y = "Frequency"
  )
```

### Exercise 2

Add a density curve to the histogram.

::: {.callout-tip collapse="true"}
```{r}
ggplot(data_long, aes(x = Expression)) +
  geom_histogram(aes(y = after_stat(density)),
    bins = 40,
    fill = "lightgray", color = "gray40"
  ) +
  geom_density(color = "tomato", linewidth = 1) +
  labs(
    title = "Distribution of normalized expression values",
    x = "Expression",
    y = "Density"
  )
```
:::

### Volcano plot of differential results

In base R, we used `plot()`. In `ggplot2`, we use `geom_point()`.

#### Sucrose 24h

```{r}
diff_df_24h <- data.frame(
  lfc = data$diff$sucrose_24h_lfc,
  pval = data$diff$sucrose_24h_pval
)
diff_df_24h$significant <- diff_df_24h$pval < 0.05 & abs(diff_df_24h$lfc) > 1

ggplot(diff_df_24h, aes(x = lfc, y = -log10(pval), color = significant)) +
  geom_point(size = 2, alpha = 0.7) +
  scale_color_manual(values = c("gray70", "tomato")) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "red") +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
  labs(
    title = "Volcano Plot — Sucrose 24h",
    x = "log2 Fold Change",
    y = "-log10(p-value)"
  )
```

### Exercise 3

Create a volcano plot for the 3h sucrose treatment.

::: {.callout-tip collapse="true"}
```{r}
diff_df_3h <- data.frame(
  lfc = data$diff$sucrose_3h_lfc,
  pval = data$diff$sucrose_3h_pval
)
diff_df_3h$significant <- diff_df_3h$pval < 0.05 & abs(diff_df_3h$lfc) > 1

ggplot(diff_df_3h, aes(x = lfc, y = -log10(pval), color = significant)) +
  geom_point(size = 2, alpha = 0.7) +
  scale_color_manual(values = c("gray70", "tomato")) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "red") +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
  labs(
    title = "Volcano Plot — Sucrose 3h",
    x = "log2 Fold Change",
    y = "-log10(p-value)"
  )
```
:::

### Combining plots

In base R, we used `par(mfrow = ...)`. In the `ggplot2` ecosystem, the `patchwork` package is a popular choice.

```{r}
library(patchwork)

p1 <- ggplot(diff_df_24h, aes(x = lfc, y = -log10(pval), color = significant)) +
  geom_point(size = 2, alpha = 0.7) +
  scale_color_manual(values = c("gray70", "tomato")) +
  labs(title = "Sucrose 24h")

p2 <- ggplot(diff_df_3h, aes(x = lfc, y = -log10(pval), color = significant)) +
  geom_point(size = 2, alpha = 0.7) +
  scale_color_manual(values = c("gray70", "tomato")) +
  labs(title = "Sucrose 3h")
```

```{r}
p1 | p2
```

```{r}
p1 / p2
```


## Session information
::: {.callout-tip collapse="true"}
```{r}
sessionInfo()
```
:::
